#include "ctagSoundProcessorplatverb.hpp"

using namespace CTAG::SP;

#define CHANNELS 2

#define SAMPLE_RATE 44100.f

#define DEBUG 0

static int iter = 0;
void ctagSoundProcessorplatverb::Process(const ProcessData &data) {
    iter++;

    int buffer_size = GetAudioBufferSize();

    
    _plateau->params[Plateau::DECAY_PARAM].setValueNorm(
      decay / 10000.0
    );
    _plateau->params[Plateau::SIZE_PARAM].setValueNorm(
      room_size / 10000.0
    );
    _plateau->params[Plateau::DRY_PARAM].setValueNorm(
      dry / 10000.0
    );
    _plateau->params[Plateau::WET_PARAM].setValueNorm(
      wet / 10000.0
    );
    
    _plateau->params[Plateau::DIFFUSION_PARAM].setValueNorm(
      diffusion / 10000.0
    );
    _plateau->params[Plateau::PRE_DELAY_PARAM].setValueNorm(
      pre_delay / 10000.0
    );
    _plateau->params[Plateau::INPUT_LOW_DAMP_PARAM].setValueNorm(
      input_low_damp / 10000.0
    );
    _plateau->params[Plateau::INPUT_HIGH_DAMP_PARAM].setValueNorm(
      input_high_damp / 10000.0
    );
    _plateau->params[Plateau::REVERB_LOW_DAMP_PARAM].setValueNorm(
      reverb_low_damp / 10000.0
    );
    _plateau->params[Plateau::REVERB_HIGH_DAMP_PARAM].setValueNorm(
      reverb_high_damp / 10000.0
    );

    #if DEBUG

    if (iter % 1000 == 0) {
      printf("Params\n");
      for (int i = 0; i < Plateau::NUM_PARAMS; ++i)
      {
        printf("%s = %f\n", PlateauParamIdStrings[i], _plateau->params[i].getValue());
      }
      printf("Inputs\n");
      for (int i = 0; i < Plateau::NUM_INPUTS; ++i)
      {
        printf("input %d = %f\n", i, _plateau->inputs[i].getVoltage());
      }
      printf("Outputs\n");
      for (int i = 0; i < Plateau::NUM_OUTPUTS; ++i)
      {
        printf("output %d = %f\n", i, _plateau->outputs[i].getVoltage());
      }


      printf("decay / 10000.0 = %f\n" , decay / 10000.0);

      printf("room_size / 10000.0 = %f\n" , room_size / 10000.0);

      printf("dry / 10000.0 = %f\n" , dry / 10000.0);

      printf("wet / 10000.0 = %f\n" , wet / 10000.0);

      printf("diffusion / 10000.0 = %f\n" , diffusion / 10000.0);

      printf("pre_delay / 10000.0 = %f\n" , pre_delay / 10000.0);

      printf("input_low_damp / 10000.0 = %f\n" , input_low_damp / 10000.0);

      printf("input_high_damp / 10000.0 = %f\n" , input_high_damp / 10000.0);

      printf("reverb_low_damp / 10000.0 = %f\n" , reverb_low_damp / 10000.0);

      printf("reverb_high_damp / 10000.0 = %f\n" , reverb_high_damp / 10000.0);

      printf("\n");
    }
    #endif

    for (int i = 0; i < buffer_size; i++) {
      for (int ch = 0; ch < CHANNELS; ++ch) {
        _plateau->inputs[ch == 0 ? Plateau::LEFT_INPUT : Plateau::RIGHT_INPUT].setVoltage(data.buf[i * CHANNELS + ch] * 5.f);
      }

      _plateau->process();

      for (int ch = 0; ch < CHANNELS; ++ch) {
        data.buf[i * CHANNELS + ch] = _plateau->outputs[ch == 0 ? Plateau::LEFT_OUTPUT : Plateau::RIGHT_OUTPUT].getVoltage() / 5.f; 
      }
    }
}

ctagSoundProcessorplatverb::ctagSoundProcessorplatverb() {
    // construct internal data model
    knowYourself();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    LoadPreset(0);
    
   _plateau = new Plateau(SAMPLE_RATE) ;
   _plateau->inputs[Plateau::LEFT_INPUT].connected = true;
   _plateau->inputs[Plateau::RIGHT_INPUT].connected = true;
   _plateau->outputs[Plateau::LEFT_OUTPUT].connected = true;
   _plateau->outputs[Plateau::RIGHT_OUTPUT].connected = true;
}

ctagSoundProcessorplatverb::~ctagSoundProcessorplatverb() {
    delete _plateau;
}

void ctagSoundProcessorplatverb::knowYourself(){
    // autogenerated code here
    // sectionCpp0
	pMapPar.emplace("decay", [&](const int val){ decay = val;});
	pMapCv.emplace("decay", [&](const int val){ cv_decay = val;});
	pMapPar.emplace("room_size", [&](const int val){ room_size = val;});
	pMapCv.emplace("room_size", [&](const int val){ cv_room_size = val;});
	pMapPar.emplace("dry", [&](const int val){ dry = val;});
	pMapCv.emplace("dry", [&](const int val){ cv_dry = val;});
	pMapPar.emplace("wet", [&](const int val){ wet = val;});
	pMapCv.emplace("wet", [&](const int val){ cv_wet = val;});
  pMapPar.emplace("diffusion", [&](const int val){ diffusion = val;});
  pMapCv.emplace("diffusion", [&](const int val){ cv_diffusion = val;});
  pMapPar.emplace("pre_delay", [&](const int val){ pre_delay = val;});
  pMapCv.emplace("pre_delay", [&](const int val){ cv_pre_delay = val;});
	pMapPar.emplace("input_low_damp", [&](const int val){ input_low_damp = val;});
	pMapCv.emplace("input_low_damp", [&](const int val){ cv_input_low_damp = val;});
	pMapPar.emplace("input_high_damp", [&](const int val){ input_high_damp = val;});
	pMapCv.emplace("input_high_damp", [&](const int val){ cv_input_high_damp = val;});
	pMapPar.emplace("reverb_low_damp", [&](const int val){ reverb_low_damp = val;});
	pMapCv.emplace("reverb_low_damp", [&](const int val){ cv_reverb_low_damp = val;});
	pMapPar.emplace("reverb_high_damp", [&](const int val){ reverb_high_damp = val;});
	pMapCv.emplace("reverb_high_damp", [&](const int val){ cv_reverb_high_damp = val;});
	isStereo = true;
	id = "platverb";
	// sectionCpp0
}