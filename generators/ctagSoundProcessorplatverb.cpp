#include "ctagSoundProcessorplatverb.hpp"

using namespace CTAG::SP;

void ctagSoundProcessorplatverb::Process(const ProcessData &data) {
}

ctagSoundProcessorplatverb::ctagSoundProcessorplatverb() {
    // construct internal data model
    knowYourself();
    model = std::make_unique<ctagSPDataModel>(id, isStereo);
    LoadPreset(0);
}

ctagSoundProcessorplatverb::~ctagSoundProcessorplatverb() {
}

void ctagSoundProcessorplatverb::knowYourself(){
    // autogenerated code here
    // sectionCpp0
	pMapPar.emplace("decay", [&](const int val){ decay = val;});
	pMapCv.emplace("decay", [&](const int val){ cv_decay = val;});
	pMapPar.emplace("size", [&](const int val){ size = val;});
	pMapCv.emplace("size", [&](const int val){ cv_size = val;});
	pMapPar.emplace("dry", [&](const int val){ dry = val;});
	pMapCv.emplace("dry", [&](const int val){ cv_dry = val;});
	pMapPar.emplace("wet", [&](const int val){ wet = val;});
	pMapCv.emplace("wet", [&](const int val){ cv_wet = val;});
	pMapPar.emplace("diffusion", [&](const int val){ diffusion = val;});
	pMapCv.emplace("diffusion", [&](const int val){ cv_diffusion = val;});
	pMapPar.emplace("input_low_damp", [&](const int val){ input_low_damp = val;});
	pMapCv.emplace("input_low_damp", [&](const int val){ cv_input_low_damp = val;});
	pMapPar.emplace("input_high_damp", [&](const int val){ input_high_damp = val;});
	pMapCv.emplace("input_high_damp", [&](const int val){ cv_input_high_damp = val;});
	pMapPar.emplace("reverb_low_damp", [&](const int val){ reverb_low_damp = val;});
	pMapCv.emplace("reverb_low_damp", [&](const int val){ cv_reverb_low_damp = val;});
	pMapPar.emplace("reverb_high_damp", [&](const int val){ reverb_high_damp = val;});
	pMapCv.emplace("reverb_high_damp", [&](const int val){ cv_reverb_high_damp = val;});
	isStereo = true;
	id = "platverb";
	// sectionCpp0
}